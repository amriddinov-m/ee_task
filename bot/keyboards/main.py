# from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
#
# from bot.models import CategoryProduct, LocationPoint, Product
#
# TG_BUTTON_MAX_LENGTH = 28
#
#
# async def generate_keyboard(btns, **kwargs):
#     reply_kb = ReplyKeyboardMarkup(**kwargs)
#     for desc in btns:
#         if desc:
#             reply_kb.insert(desc[:TG_BUTTON_MAX_LENGTH])
#     return reply_kb
#
#
# async def generate_keyboard_inline(*args, **kwargs):
#     kb = InlineKeyboardMarkup(**kwargs)
#     if isinstance(*args, list):
#         for arg in args:
#             for btn in arg:
#                 kb.insert(btn)
#     else:
#         kb.insert(*args)
#     return kb
#
#
# async def show_categories():
#     categories = CategoryProduct.objects.values_list('id', 'title')
#     btns = []
#     for obj_id, title in categories:
#         btn = InlineKeyboardButton(title, callback_data=f'category_{obj_id}')
#         btns.append(btn)
#     categories_kb = await generate_keyboard_inline(btns, row_width=1)
#     return categories_kb
#
#
# async def show_products(category_id):
#     products = Product.objects.filter(category_id=category_id).values_list('id', 'title')
#     btns = []
#     for obj_id, title in products:
#         btn = InlineKeyboardButton(title, callback_data=f'product_{obj_id}')
#         btns.append(btn)
#     products_kb = await generate_keyboard_inline(btns, row_width=2)
#     return products_kb
#
#
# async def show_location_points():
#     locations = LocationPoint.objects.values_list('id', 'title')
#     btns = []
#     for obj_id, title in locations:
#         btn = InlineKeyboardButton(f'{title}üü¢', callback_data=f'location_{obj_id}')
#         btns.append(btn)
#     locations_kb = await generate_keyboard_inline(btns, row_width=2)
#     return locations_kb
#
#
# async def show_question_btn(order):
#     question_btn = [InlineKeyboardButton('‚úÖ –ü—Ä–∏–Ω—è—Ç—å',
#                                          callback_data=f'accept_order|{order.id}'),
#                     InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data=f'cancel_order|{order.id}')]
#     question_kb = await generate_keyboard_inline(question_btn)
#     return question_kb
from aiogram import types
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.MESSAGES import MESSAGES


async def pre_send_btns():
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text='–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞üìû',
            callback_data=f'update_phone'),
    )
    builder.row(
        types.InlineKeyboardButton(
            text='–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–πüìù',
            callback_data=f'update_comment'),
    )
    builder.row(
        types.InlineKeyboardButton(
            text='–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É‚ùå',
            callback_data='cancel_application'),
        types.InlineKeyboardButton(
            text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É‚úÖ',
            callback_data='send_application')

    )

    return builder.as_markup()


def main_menu_btn():
    kb = [
        [
            KeyboardButton(text='üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
        ],

    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    return keyboard


def start_btns():
    kb = [
        [
            KeyboardButton(text='üõí –°–æ–∑–¥–∞—Ç—å –ª–æ—Ç'),
            KeyboardButton(text='üìå –°–æ–∑–¥–∞—Ç—å –ø–æ—Ä—É—á–µ–Ω–∏–µ'),
        ],
        [
            KeyboardButton(text='üìÉ –°—Ç–∞—Ç—É—Å—ã –ø–æ –ª–æ—Ç–∞–º'),
            KeyboardButton(text='üìÉ –°—Ç–∞—Ç—É—Å—ã –ø–æ—Ä—É—á–µ–Ω–∏–π'),
        ],
        [
            KeyboardButton(text='üîé –ü–æ–∏—Å–∫ –ø–æ –ª–æ—Ç–∞–º'),
            KeyboardButton(text='üîé –ü–æ–∏—Å–∫ –ø–æ—Ä—É—á–µ–Ω–∏–π'),
        ],

    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True,
                                   input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞—Å –∏–º–µ–Ω–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç üëáüèº")
    return keyboard


def phone_btns():
    kb = [
        [
            KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True),
        ],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True,
                                   input_field_placeholder="–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ üëáüèº")
    return keyboard


def executors_inline_btns(qs):
    builder = InlineKeyboardBuilder()
    for obj in qs:
        builder.row(
            types.InlineKeyboardButton(
                text=f'{obj.fullname}',
                callback_data=f'executor_{obj.pk}')
        )
    return builder.as_markup()
